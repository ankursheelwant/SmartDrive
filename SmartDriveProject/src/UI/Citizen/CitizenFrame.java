/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Citizen;

import BLL.DrivingData.Drive;
import BLL.EcoSystem;
import BLL.Enterprise.Enterprise;
import BLL.Network.Network;
import BLL.Organization.DoctorOrganization;
import BLL.Organization.Organization;
import BLL.Person.VehicleSensorData;
import BLL.Person.VitalSign;
import BLL.UserAccount.UserAccount;
import BLL.WorkQueue.RequestAmbulance;
import BLL.WorkQueue.RequestDoctorAppointment;
import BLL.WorkQueue.TrafficCongestionAlert;
import BLL.WorkQueue.WeatherWarningAlert;
import BLL.WorkQueue.WorkRequest;
import MailPackage.SendEmail;
import ThreadLoop.RealTimeMonitoringThread;
import static UI.SmartDriveMain.brightness;
import static UI.SmartDriveMain.dB4OUtil;
import static UI.SmartDriveMain.hue;
import static UI.SmartDriveMain.saturation;
import static UI.SmartDriveMain.validator;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Label;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ankur
 */
public class CitizenFrame extends javax.swing.JFrame {

    /**
     * Creates new form ResidentAdminFrame
     */
    EcoSystem system;
    Organization organization;
    UserAccount account;
    Network network;
    WeatherWarningAlert weatherWarningAlert;
    boolean firstCheck;
    RealTimeMonitoringThread driveThread;
    
    public CitizenFrame(UserAccount account, Organization organization, Network network ,EcoSystem system) {
        initComponents();
        welcomeRoleLabel.setText(account.getPerson().getName());
        this.system=system;
        this.organization=organization;
        this.account=account;
        this.network=network;
        this.weatherWarningAlert=WeatherWarningAlert.getInstance();
        firstCheck=true;
        
        abnormalHealthLabel.setVisible(false);
        abnormalHealthLabel1.setVisible(false);
        bookAppointmentBtn.setVisible(false);
        bookAppointmentBtn.setEnabled(false);
        appointmentConfirmLabel.setVisible(false);
     
        vehicleMaintenanceLabel.setVisible(false);
        vehicleMaintenanceLabel1.setVisible(false);
        reportMaintenanceBtn.setEnabled(false);
        reportMaintenanceBtn.setVisible(false);
            
        populateRequestTable();
        checkWeatherWarning();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void checkWeatherWarning()
    {
        
        if(weatherWarningAlert.isIsWeatherGood())
        {
            weatherWarningLabel.setText("Good weather. Enjoy the drive!");
                       
        }
        else
        {
           weatherWarningLabel.setText("Unsuitable weather conditions to drive");
        }
    }
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList())
        {
            if(request instanceof RequestDoctorAppointment)
            {
                Object[] row = new Object[4];
                row[0] = request.getMessage();
                row[1] = request.getReceiver();
                row[2] = request.getStatus();
                row[3]="Date:"+new SimpleDateFormat("MM-dd-yyyy").format(((RequestDoctorAppointment) request).getAppointmentDate());
                model.addRow(row);
            }
            if(request instanceof RequestAmbulance)
            {
                if(account.equals(request.getSender()))
                {
                    Object[] row = new Object[4];
                    row[0] = request.getMessage();
                    row[1] = request.getReceiver();
                    row[2] = request.getStatus();
                    row[3] = ((RequestAmbulance)request).getLocation();

                    model.addRow(row);
                }
                
                if(((RequestAmbulance)request).isIsEnroute())
                {
                    ambulanceWarningLabel.setText("Ambulance en route. Location:"+((RequestAmbulance)request).getLocation());
                }
                else
                {
                    ambulanceWarningLabel.setText("");
                }
            }
            
            if(request instanceof TrafficCongestionAlert)
            {
                trafficWarningLabel.setText(request.getMessage()+ ((TrafficCongestionAlert)request).getLocation());
            }
            else
            {
                trafficWarningLabel.setText("");
            }
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        horizontalSpiltPane = new javax.swing.JSplitPane();
        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        welcomeRoleLabel = new javax.swing.JLabel();
        requestAmbulanceBtn = new javax.swing.JButton();
        driveBtn = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        driversPortalPanel = new javax.swing.JPanel();
        trafficCongestionPanel = new javax.swing.JPanel();
        trafficTitleLabel = new javax.swing.JLabel();
        ambulanceWarningLabel = new javax.swing.JLabel();
        trafficWarningLabel = new javax.swing.JLabel();
        weatherForecastPanel = new javax.swing.JPanel();
        weatherTitleLabel = new javax.swing.JLabel();
        weatherWarningLabel = new javax.swing.JLabel();
        vehiceSensorPanel = new javax.swing.JPanel();
        vehicleSensorTitleLabel = new javax.swing.JLabel();
        checkVehicleConditionBtn = new javax.swing.JButton();
        tyrePressureLabel = new javax.swing.JLabel();
        tyrePressureTextfield = new javax.swing.JTextField();
        engineLabel = new javax.swing.JLabel();
        engineTextfield = new javax.swing.JTextField();
        brakeConditionLabel = new javax.swing.JLabel();
        reportMaintenanceBtn = new javax.swing.JButton();
        vehicleMaintenanceLabel1 = new javax.swing.JLabel();
        vehicleMaintenanceLabel = new javax.swing.JLabel();
        brakeTextfield = new javax.swing.JTextField();
        brakeConditionLabel1 = new javax.swing.JLabel();
        speedLimitTextfield = new javax.swing.JTextField();
        vitalSignPanel = new javax.swing.JPanel();
        healthSensorTitleLabel = new javax.swing.JLabel();
        bloodPressureLabel = new javax.swing.JLabel();
        bloodPressureTextfield = new javax.swing.JTextField();
        heartRateLabel = new javax.swing.JLabel();
        heartRateTextfield = new javax.swing.JTextField();
        respiratoryRateLabel = new javax.swing.JLabel();
        submitVitalSignBtn = new javax.swing.JButton();
        abnormalHealthLabel = new javax.swing.JLabel();
        abnormalHealthLabel1 = new javax.swing.JLabel();
        bookAppointmentBtn = new javax.swing.JButton();
        warningLabel1 = new javax.swing.JLabel();
        respiratoryRateTextfield = new javax.swing.JTextField();
        appointmentConfirmLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Citizen:Driver's Portal");

        horizontalSpiltPane.setDividerLocation(100);
        horizontalSpiltPane.setDividerSize(1);
        horizontalSpiltPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        headerPanel.setBackground(new java.awt.Color(255, 255, 255));

        headerLabel.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(0, 102, 153));
        headerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/car.jpg"))); // NOI18N
        headerLabel.setText("Smart Drive");

        logoutBtn.setBackground(new java.awt.Color(255, 255, 255));
        logoutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.jpg"))); // NOI18N
        logoutBtn.setToolTipText("Logout and Close");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        welcomeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        welcomeLabel.setText("Welcome to Portal:");

        welcomeRoleLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        requestAmbulanceBtn.setBackground(new java.awt.Color(255, 255, 255));
        requestAmbulanceBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        requestAmbulanceBtn.setForeground(new java.awt.Color(0, 102, 153));
        requestAmbulanceBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ambulance.jpg"))); // NOI18N
        requestAmbulanceBtn.setText("|Request");
        requestAmbulanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestAmbulanceBtnActionPerformed(evt);
            }
        });

        driveBtn.setBackground(new java.awt.Color(255, 255, 255));
        driveBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        driveBtn.setForeground(new java.awt.Color(0, 102, 153));
        driveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/steeringWheel.jpg"))); // NOI18N
        driveBtn.setText("|Drive");
        driveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(welcomeRoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addComponent(driveBtn)
                .addGap(18, 18, 18)
                .addComponent(requestAmbulanceBtn)
                .addGap(18, 18, 18)
                .addComponent(logoutBtn)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(requestAmbulanceBtn)
                        .addComponent(driveBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(welcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(welcomeRoleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        horizontalSpiltPane.setTopComponent(headerPanel);

        driversPortalPanel.setBackground(new java.awt.Color(255, 255, 255));

        trafficCongestionPanel.setBackground(new java.awt.Color(255, 255, 255));
        trafficCongestionPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));

        trafficTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        trafficTitleLabel.setText("Traffic Congestion Warning:");

        ambulanceWarningLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        trafficWarningLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout trafficCongestionPanelLayout = new javax.swing.GroupLayout(trafficCongestionPanel);
        trafficCongestionPanel.setLayout(trafficCongestionPanelLayout);
        trafficCongestionPanelLayout.setHorizontalGroup(
            trafficCongestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trafficCongestionPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(trafficTitleLabel)
                .addContainerGap(90, Short.MAX_VALUE))
            .addGroup(trafficCongestionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trafficCongestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ambulanceWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trafficWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        trafficCongestionPanelLayout.setVerticalGroup(
            trafficCongestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trafficCongestionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trafficTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ambulanceWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trafficWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        weatherForecastPanel.setBackground(new java.awt.Color(255, 255, 255));
        weatherForecastPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));

        weatherTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weatherTitleLabel.setText("Weather Forecast:");

        weatherWarningLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout weatherForecastPanelLayout = new javax.swing.GroupLayout(weatherForecastPanel);
        weatherForecastPanel.setLayout(weatherForecastPanelLayout);
        weatherForecastPanelLayout.setHorizontalGroup(
            weatherForecastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weatherForecastPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(weatherTitleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(weatherForecastPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        weatherForecastPanelLayout.setVerticalGroup(
            weatherForecastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weatherForecastPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(weatherWarningLabel)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        vehiceSensorPanel.setBackground(new java.awt.Color(255, 255, 255));
        vehiceSensorPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));

        vehicleSensorTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        vehicleSensorTitleLabel.setText("Input Vehicle sensor values:");

        checkVehicleConditionBtn.setBackground(new java.awt.Color(255, 255, 255));
        checkVehicleConditionBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkVehicleConditionBtn.setForeground(new java.awt.Color(0, 102, 153));
        checkVehicleConditionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/maintainence.jpg"))); // NOI18N
        checkVehicleConditionBtn.setText("|Check");
        checkVehicleConditionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkVehicleConditionBtnActionPerformed(evt);
            }
        });

        tyrePressureLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tyrePressureLabel.setText("Tyre pressure :");

        tyrePressureTextfield.setEditable(false);
        tyrePressureTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tyrePressureTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tyrePressureTextfieldfocusGainedToAddAdminTextfields(evt);
            }
        });

        engineLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        engineLabel.setText("Engine Check:");

        engineTextfield.setEditable(false);
        engineTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        engineTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                engineTextfieldfocusGainedToAddAdminTextfields(evt);
            }
        });

        brakeConditionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        brakeConditionLabel.setText("Brake Condition:");

        reportMaintenanceBtn.setBackground(new java.awt.Color(255, 255, 255));
        reportMaintenanceBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reportMaintenanceBtn.setForeground(new java.awt.Color(0, 102, 153));
        reportMaintenanceBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mail.jpg"))); // NOI18N
        reportMaintenanceBtn.setBorder(null);
        reportMaintenanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportMaintenanceBtnActionPerformed(evt);
            }
        });

        vehicleMaintenanceLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vehicleMaintenanceLabel1.setForeground(new java.awt.Color(0, 102, 153));
        vehicleMaintenanceLabel1.setText("Report to Maintenance team:");

        vehicleMaintenanceLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        vehicleMaintenanceLabel.setForeground(new java.awt.Color(0, 102, 153));
        vehicleMaintenanceLabel.setText("Vehicle needs maintenance check");

        brakeTextfield.setEditable(false);
        brakeTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        brakeTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brakeTextfieldfocusGainedToAddAdminTextfields(evt);
            }
        });

        brakeConditionLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        brakeConditionLabel1.setText("Speed Limit:");

        speedLimitTextfield.setEditable(false);
        speedLimitTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        speedLimitTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                speedLimitTextfieldfocusGainedToAddAdminTextfields(evt);
            }
        });

        javax.swing.GroupLayout vehiceSensorPanelLayout = new javax.swing.GroupLayout(vehiceSensorPanel);
        vehiceSensorPanel.setLayout(vehiceSensorPanelLayout);
        vehiceSensorPanelLayout.setHorizontalGroup(
            vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(vehicleSensorTitleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                .addGap(0, 91, Short.MAX_VALUE)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vehiceSensorPanelLayout.createSequentialGroup()
                        .addComponent(vehicleMaintenanceLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportMaintenanceBtn)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vehiceSensorPanelLayout.createSequentialGroup()
                        .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(vehicleMaintenanceLabel)
                            .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                                .addComponent(checkVehicleConditionBtn)
                                .addGap(45, 45, 45)))
                        .addGap(58, 58, 58))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vehiceSensorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                        .addComponent(brakeConditionLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(speedLimitTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                        .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(engineLabel)
                            .addComponent(tyrePressureLabel)
                            .addComponent(brakeConditionLabel))
                        .addGap(26, 26, 26)
                        .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tyrePressureTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(engineTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brakeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 41, 41))
        );
        vehiceSensorPanelLayout.setVerticalGroup(
            vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vehicleSensorTitleLabel)
                .addGap(18, 18, 18)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tyrePressureLabel)
                    .addComponent(tyrePressureTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engineTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(engineLabel))
                .addGap(18, 18, 18)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brakeConditionLabel)
                    .addComponent(brakeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brakeConditionLabel1)
                    .addComponent(speedLimitTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkVehicleConditionBtn)
                .addGap(16, 16, 16)
                .addComponent(vehicleMaintenanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehiceSensorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reportMaintenanceBtn)
                    .addGroup(vehiceSensorPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(vehicleMaintenanceLabel1)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        vitalSignPanel.setBackground(new java.awt.Color(255, 255, 255));
        vitalSignPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));

        healthSensorTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        healthSensorTitleLabel.setText("Wearable devices sensor values:");

        bloodPressureLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bloodPressureLabel.setText("Blood Pressure:");

        bloodPressureTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bloodPressureTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focusGainedToTextfield(evt);
            }
        });

        heartRateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        heartRateLabel.setText("Heart Rate:");

        heartRateTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        heartRateTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focusGainedToTextfield(evt);
            }
        });

        respiratoryRateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        respiratoryRateLabel.setText("Respiratory Rate:");

        submitVitalSignBtn.setBackground(new java.awt.Color(255, 255, 255));
        submitVitalSignBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        submitVitalSignBtn.setForeground(new java.awt.Color(0, 102, 153));
        submitVitalSignBtn.setText("Submit");
        submitVitalSignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitVitalSignBtnActionPerformed(evt);
            }
        });

        abnormalHealthLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        abnormalHealthLabel.setForeground(new java.awt.Color(0, 102, 153));
        abnormalHealthLabel.setText("Abnormal vital signs recorded");

        abnormalHealthLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        abnormalHealthLabel1.setForeground(new java.awt.Color(0, 102, 153));
        abnormalHealthLabel1.setText("Need an appointment with Doctor?");

        bookAppointmentBtn.setBackground(new java.awt.Color(255, 255, 255));
        bookAppointmentBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bookAppointmentBtn.setForeground(new java.awt.Color(0, 102, 153));
        bookAppointmentBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/calender.jpg"))); // NOI18N
        bookAppointmentBtn.setToolTipText("Book an Appointment");
        bookAppointmentBtn.setBorder(null);
        bookAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentBtnActionPerformed(evt);
            }
        });

        warningLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        warningLabel1.setForeground(new java.awt.Color(255, 0, 0));

        respiratoryRateTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        respiratoryRateTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focusGainedToTextfield(evt);
            }
        });

        appointmentConfirmLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout vitalSignPanelLayout = new javax.swing.GroupLayout(vitalSignPanel);
        vitalSignPanel.setLayout(vitalSignPanelLayout);
        vitalSignPanelLayout.setHorizontalGroup(
            vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vitalSignPanelLayout.createSequentialGroup()
                .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(heartRateLabel)
                            .addComponent(bloodPressureLabel)
                            .addComponent(respiratoryRateLabel))
                        .addGap(26, 26, 26)
                        .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bloodPressureTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heartRateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(respiratoryRateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(healthSensorTitleLabel))
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(abnormalHealthLabel))
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitVitalSignBtn)))
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(appointmentConfirmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(vitalSignPanelLayout.createSequentialGroup()
                                .addComponent(abnormalHealthLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bookAppointmentBtn)))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        vitalSignPanelLayout.setVerticalGroup(
            vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vitalSignPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(healthSensorTitleLabel)
                .addGap(26, 26, 26)
                .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodPressureLabel)
                    .addComponent(bloodPressureTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heartRateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heartRateLabel))
                .addGap(18, 18, 18)
                .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(respiratoryRateLabel)
                    .addComponent(respiratoryRateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(submitVitalSignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(abnormalHealthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vitalSignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookAppointmentBtn)
                    .addGroup(vitalSignPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(abnormalHealthLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appointmentConfirmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout driversPortalPanelLayout = new javax.swing.GroupLayout(driversPortalPanel);
        driversPortalPanel.setLayout(driversPortalPanelLayout);
        driversPortalPanelLayout.setHorizontalGroup(
            driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driversPortalPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weatherForecastPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vitalSignPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(trafficCongestionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vehiceSensorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        driversPortalPanelLayout.setVerticalGroup(
            driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driversPortalPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weatherForecastPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trafficCongestionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(driversPortalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vitalSignPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vehiceSensorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Drivers Portal", driversPortalPanel);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Details"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(274, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Request Status", jPanel1);

        horizontalSpiltPane.setRightComponent(tabbedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(horizontalSpiltPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(horizontalSpiltPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        dB4OUtil.storeSystem(system);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    public void requestAmbulance()
    {
        RequestAmbulance request=new RequestAmbulance();

        request.setMessage("Need Ambulance!!");
        request.setSender(account);
        request.setStatus("Emergency");
        request.setRequestDate(new Date());
        request.setLocation("58 Huntington Avenue");
        
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
            {
                if(enterprise.getEnterpriseType()==Enterprise.EnterpriseType.Healthcare)
                {
                    enterprise.getWorkQueue().getWorkRequestList().add(request);
                    account.getWorkQueue().getWorkRequestList().add(request);
                }
                
            }
            populateRequestTable();
    }
    private void requestAmbulanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestAmbulanceBtnActionPerformed
        // TODO add your handling code here:
        requestAmbulance();
    }//GEN-LAST:event_requestAmbulanceBtnActionPerformed

    private void focusGainedToTextfield(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGainedToTextfield
        // TODO add your handling code here:
        warningLabel1.setText("");
        validator.clearValidationMarkOnFocus(evt);
    }//GEN-LAST:event_focusGainedToTextfield

    private void submitVitalSignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitVitalSignBtnActionPerformed
        // TODO add your handling code here:
        int count=0;
        if(!bloodPressureTextfield.getText().trim().isEmpty() && validator.isValidNumber(bloodPressureTextfield.getText().trim()))
        {
            count++;
        }
        else
        {
            bloodPressureTextfield.setBackground(Color.pink);
            warningLabel1.setText("*Invalid input");
        }
        if(!respiratoryRateTextfield.getText().trim().isEmpty() && validator.isValidNumber(respiratoryRateTextfield.getText().trim()))
        {
            count++;
        }
        else
        {
            respiratoryRateTextfield.setBackground(Color.pink);
            warningLabel1.setText("*Invalid input");
        }
        if(!heartRateTextfield.getText().trim().isEmpty() && validator.isValidNumber(heartRateTextfield.getText().trim()))
        {
            count++;
        }
        else
        {
            heartRateTextfield.setBackground(Color.pink);
            warningLabel1.setText("*Invalid input");
        }
        if(count==3)
        {
            int bloodPressure = Integer.parseInt(bloodPressureTextfield.getText());
            int heartRate = Integer.parseInt(heartRateTextfield.getText());
            int respiratoryRate = Integer.parseInt(respiratoryRateTextfield.getText());

            VitalSign vs=account.getPerson().getVitalSign();
            vs.setBloodPresssure(bloodPressure);
            vs.setHeartRate(heartRate);
            vs.setRespiratoryRate(respiratoryRate);
            
            //JOptionPane.showMessageDialog(this,"Vital sign recorded","Done",JOptionPane.INFORMATION_MESSAGE);
            if(!isHealthNormal(bloodPressure, heartRate, respiratoryRate))
            {
                abnormalHealthLabel.setText("Abnormal vital signs recorded");
                abnormalHealthLabel.setVisible(true);
                abnormalHealthLabel1.setVisible(true);
                bookAppointmentBtn.setVisible(true);
                bookAppointmentBtn.setEnabled(true);
                appointmentConfirmLabel.setVisible(true);
            }
            else
            {
                abnormalHealthLabel.setText("Normal vital signs recorded");
                abnormalHealthLabel.setVisible(true);
                abnormalHealthLabel1.setVisible(false);
                bookAppointmentBtn.setVisible(false);
                bookAppointmentBtn.setEnabled(false);
                appointmentConfirmLabel.setVisible(false);
            }
        }
    }//GEN-LAST:event_submitVitalSignBtnActionPerformed

    private boolean isHealthNormal(int bp, int hr, int rr)
    {
        if((bp>=110&&bp<=120)&&(hr>=55&&hr<=105)&&(rr>=12&&rr<=20))
        {
            account.getPerson().getVitalSign().setHealthNormal(true);
            return true;
        }
        else
        {
            account.getPerson().getVitalSign().setHealthNormal(false);
            return false;
        }
    }
    private void bookAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentBtnActionPerformed
        // TODO add your handling code here:
        JPanel panel=new JPanel(new BorderLayout());
        panel.setSize(300,200);
        Label lbl=new Label();
        lbl.setText("Choose a date");
        com.toedter.calendar.JDateChooser dateChoose = new com.toedter.calendar.JDateChooser();
        dateChoose.setDateFormatString("MM-dd-yyyy");
        dateChoose.getJCalendar().setMinSelectableDate(new Date());
        panel.add(lbl, BorderLayout.NORTH);
        panel.add(dateChoose, BorderLayout.CENTER);
        int i=JOptionPane.showConfirmDialog(this, panel,"Select appointment date",JOptionPane.PLAIN_MESSAGE);
        if(dateChoose.getDate()!=null && i==0)
        {
            Date date=dateChoose.getDate();

            RequestDoctorAppointment request=new RequestDoctorAppointment();
            request.setAppointmentDate(date);
            request.setMessage("Doctor Appointment for:"+account.getPerson());
            request.setSender(account);
            request.setStatus("Pending");

            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
            {
                for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                {
                    if (organization instanceof DoctorOrganization && organization!=null)
                    {
                        organization.getWorkQueue().getWorkRequestList().add(request);
                        account.getWorkQueue().getWorkRequestList().add(request);
                    }
                }
            }

            populateRequestTable();
            appointmentConfirmLabel.setText("Appointment requested on:"+ new SimpleDateFormat("MM-dd-yyyy").format(date));
        }
    }//GEN-LAST:event_bookAppointmentBtnActionPerformed

    private void fetchVehiclesCondition()
    {
        int tyrePressure, speed;
        
        Random random=new Random();
        VehicleSensorData vehicleSensorData= account.getPerson().getVehicleSensorData();
        
        tyrePressure=random.nextInt(5)+29;
        
        //speed on first drive should be 0
        if(firstCheck)
        {
            firstCheck=false;
            speed=0;
        }
        else
        {
            speed=random.nextInt(80)+0;
        }
        
        //once engineCheck and brakeCondition is good, don't change it
        if(!vehicleSensorData.isEngineCheck())
        {
            vehicleSensorData.setEngineCheck(random.nextBoolean());
        }
        if(!vehicleSensorData.isBrakeCondition())
        {
            vehicleSensorData.setBrakeCondition(random.nextBoolean());
        }
                
        tyrePressureTextfield.setText(String.valueOf(tyrePressure));
        engineTextfield.setText(String.valueOf(vehicleSensorData.isEngineCheck()));
        brakeTextfield.setText(String.valueOf(vehicleSensorData.isBrakeCondition()));
        speedLimitTextfield.setText(String.valueOf(speed));
        
        vehicleSensorData.setTyrePressure(tyrePressure);
        vehicleSensorData.setSpeed(speed);
        vehicleSensorData.setIsAbnormalTyrePressure(false);
        vehicleSensorData.setIsOverSpeeding(false);
        
        
        if((tyrePressure>=30 && tyrePressure<=33) && (speed<=60) && vehicleSensorData.isEngineCheck() && vehicleSensorData.isBrakeCondition())
        {
            vehicleSensorData.setIsVehicleGood(true);
            
            
            tyrePressureTextfield.setBackground(Color.white);
            engineTextfield.setBackground(Color.white);
            brakeTextfield.setBackground(Color.white);
            speedLimitTextfield.setBackground(Color.white);
            vehicleMaintenanceLabel.setText("Vehicle is in good condition");
            vehicleMaintenanceLabel.setVisible(true);
            vehicleMaintenanceLabel1.setVisible(false);
            reportMaintenanceBtn.setEnabled(false);
            reportMaintenanceBtn.setVisible(false);
            driveBtn.requestFocus();
            driveBtn.setBackground(Color.getHSBColor(hue, saturation, brightness));
            driveBtn.setForeground(Color.white);
            //return;
        }
        else
        {
            if(!(tyrePressure>=30 && tyrePressure<=33))
            {
                tyrePressureTextfield.setBackground(Color.pink);
                vehicleSensorData.setIsAbnormalTyrePressure(true);
            }
            else
            {
                tyrePressureTextfield.setBackground(Color.white);
                vehicleSensorData.setIsAbnormalTyrePressure(false);
            }
            if(!vehicleSensorData.isEngineCheck())
            {
                engineTextfield.setBackground(Color.pink);
            }
            if(!vehicleSensorData.isBrakeCondition())
            {
                brakeTextfield.setBackground(Color.pink);
            }
            if(!(speed<=60))
            {
                speedLimitTextfield.setBackground(Color.pink);
                vehicleSensorData.setIsOverSpeeding(true);
            }
            else
            {
                speedLimitTextfield.setBackground(Color.white);
                vehicleSensorData.setIsOverSpeeding(false);
            }
            vehicleSensorData.setIsVehicleGood(false);
            
            vehicleMaintenanceLabel.setText("Vehicle needs maintenance check");
            vehicleMaintenanceLabel1.setText("Report to Maintenance team:");
            vehicleMaintenanceLabel.setVisible(true);
            vehicleMaintenanceLabel1.setVisible(true);
            reportMaintenanceBtn.setEnabled(true);
            reportMaintenanceBtn.setVisible(true);
            driveBtn.setBackground(Color.white);
            driveBtn.setForeground(Color.getHSBColor(hue, saturation, brightness));
            //return;
        }
    }
    private void checkVehicleConditionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkVehicleConditionBtnActionPerformed
        // TODO add your handling code here:
        fetchVehiclesCondition();
        
    }//GEN-LAST:event_checkVehicleConditionBtnActionPerformed

    private void tyrePressureTextfieldfocusGainedToAddAdminTextfields(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tyrePressureTextfieldfocusGainedToAddAdminTextfields
        // TODO add your handling code here:
    }//GEN-LAST:event_tyrePressureTextfieldfocusGainedToAddAdminTextfields

    private void engineTextfieldfocusGainedToAddAdminTextfields(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_engineTextfieldfocusGainedToAddAdminTextfields
        // TODO add your handling code here:
    }//GEN-LAST:event_engineTextfieldfocusGainedToAddAdminTextfields

    private void reportMaintenanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportMaintenanceBtnActionPerformed
        // TODO add your handling code here:
        JPanel panel=new JPanel(new BorderLayout());
        panel.setSize(300,200);
        Label lbl=new Label();
        lbl.setText("Enter Mail id:");
        JTextField mailId=new JTextField();
        panel.add(mailId, BorderLayout.NORTH);
        
        int i=JOptionPane.showConfirmDialog(this, panel,"Enter mail id",JOptionPane.PLAIN_MESSAGE);
        if(!mailId.getText().trim().isEmpty()&&i==0)
        {
            SendEmail sendMail=new SendEmail();
            sendMail.send(mailId.getText(), account.getPerson().getName());
        }       
        
    }//GEN-LAST:event_reportMaintenanceBtnActionPerformed

    private void brakeTextfieldfocusGainedToAddAdminTextfields(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brakeTextfieldfocusGainedToAddAdminTextfields
        // TODO add your handling code here:
    }//GEN-LAST:event_brakeTextfieldfocusGainedToAddAdminTextfields

    private void driveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveBtnActionPerformed
        // TODO add your handling code here:
        //Start drive thread
        driveThread=new RealTimeMonitoringThread(this);
        driveThread.start();
        //startDrive();
    }//GEN-LAST:event_driveBtnActionPerformed

    public void startDrive()
    {
        checkWeatherWarning();
        populateRequestTable();
        Drive drive=new Drive();
        
        //check and set vehicle's condition, returns True for good condition of vehicle
        fetchVehiclesCondition();
        
        //check and set health condition on person, returns True for normal health 
        isHealthNormal(account.getPerson().getVitalSign().getBloodPresssure(), account.getPerson().getVitalSign().getHeartRate(), account.getPerson().getVitalSign().getRespiratoryRate());
        
        //Set driver's account to drive
        drive.setAccount(account);
        
        //set weather condition to drive, True means normal weather
        drive.setNormalWeather(weatherWarningAlert.isIsWeatherGood());
        
        //Check if accident occurs
        checkAccidentPossibility(drive);
        
        network.getDriveDirectory().getDriveList().add(drive);
        
        dB4OUtil.storeSystem(system);
    }
    private void speedLimitTextfieldfocusGainedToAddAdminTextfields(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_speedLimitTextfieldfocusGainedToAddAdminTextfields
        // TODO add your handling code here:
    }//GEN-LAST:event_speedLimitTextfieldfocusGainedToAddAdminTextfields

    private void checkAccidentPossibility(Drive drive)
    {
        //True for good condition
        boolean isVehicleGood=drive.getAccount().getPerson().getVehicleSensorData().isIsVehicleGood();
        
        //True for healthy condition
        boolean isPersonGood=drive.getAccount().getPerson().getVitalSign().isHealthNormal();
        int abnormalHealth=(isPersonGood==true)?0:1;
        
        //True for good weather
        boolean isWeatherGood=drive.isNormalWeather();
        int abnormalWeather=(isWeatherGood==true)?0:1;
        
        //True for abnormal
        boolean isAbnormalTyrePressure=drive.getAccount().getPerson().getVehicleSensorData().isIsAbnormalTyrePressure();
        int abnormalTyrePressure=(isAbnormalTyrePressure==true)?1:0;
        
        //True for overspeeding
        boolean isOverSpeeding=drive.getAccount().getPerson().getVehicleSensorData().isIsOverSpeeding();
        int overSpeed=(isOverSpeeding==true)?1:0;
        
        float accidentProbability=(float)((abnormalHealth*25)+(abnormalWeather*10)+(abnormalTyrePressure*25)+(overSpeed*40))/100;
        
        if(accidentProbability<0.6)
        {
            //No accident
            drive.setIsAccident(false);
            //jLabel1.setText("No Accidents");
        }
        else
        {
            //Accident may occur
            drive.setIsAccident(true);
            //requestAmbulance();
            //jLabel1.setText("Accident may occur");
            HashMap<String,Integer> hm=network.getDriveDirectory().getPairHashMap();
            //            
            if(overSpeed==1 && abnormalTyrePressure==1)
            {
                hm.put("Overspeeding & Abnormal Tyre Pressure",hm.get("Overspeeding & Abnormal Tyre Pressure")+1);
            }
            if(overSpeed==1 && abnormalHealth==1)
            {
                hm.put("Overspeeding & Abnormal Health Condition",hm.get("Overspeeding & Abnormal Health Condition")+1);
            }
            if(overSpeed==1 && abnormalWeather==1)
            {
                hm.put("Overspeeding & Harsh Weather",hm.get("Overspeeding & Harsh Weather")+1);
            }
            if(abnormalTyrePressure==1 && abnormalHealth==1)
            {
                hm.put("Abnormal Tyre Pressure & Abnormal Health",hm.get("Abnormal Tyre Pressure & Abnormal Health")+1);
            }
            if(abnormalTyrePressure==1 && abnormalWeather==1)
            {
                hm.put("Abnormal Tyre Pressure & Harsh Weather",hm.get("Abnormal Tyre Pressure & Harsh Weather")+1);
            }
            if(abnormalHealth==1 && abnormalWeather==1)
            {
                hm.put("Abnormal Health Condition & Harsh Weather",hm.get("Abnormal Health Condition & Harsh Weather")+1);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel abnormalHealthLabel;
    private javax.swing.JLabel abnormalHealthLabel1;
    private javax.swing.JLabel ambulanceWarningLabel;
    private javax.swing.JLabel appointmentConfirmLabel;
    private javax.swing.JLabel bloodPressureLabel;
    private javax.swing.JTextField bloodPressureTextfield;
    private javax.swing.JButton bookAppointmentBtn;
    private javax.swing.JLabel brakeConditionLabel;
    private javax.swing.JLabel brakeConditionLabel1;
    private javax.swing.JTextField brakeTextfield;
    private javax.swing.JButton checkVehicleConditionBtn;
    private javax.swing.JButton driveBtn;
    private javax.swing.JPanel driversPortalPanel;
    private javax.swing.JLabel engineLabel;
    private javax.swing.JTextField engineTextfield;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel healthSensorTitleLabel;
    private javax.swing.JLabel heartRateLabel;
    private javax.swing.JTextField heartRateTextfield;
    private javax.swing.JSplitPane horizontalSpiltPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton reportMaintenanceBtn;
    private javax.swing.JButton requestAmbulanceBtn;
    private javax.swing.JLabel respiratoryRateLabel;
    private javax.swing.JTextField respiratoryRateTextfield;
    private javax.swing.JTextField speedLimitTextfield;
    private javax.swing.JButton submitVitalSignBtn;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel trafficCongestionPanel;
    private javax.swing.JLabel trafficTitleLabel;
    private javax.swing.JLabel trafficWarningLabel;
    private javax.swing.JLabel tyrePressureLabel;
    private javax.swing.JTextField tyrePressureTextfield;
    private javax.swing.JPanel vehiceSensorPanel;
    private javax.swing.JLabel vehicleMaintenanceLabel;
    private javax.swing.JLabel vehicleMaintenanceLabel1;
    private javax.swing.JLabel vehicleSensorTitleLabel;
    private javax.swing.JPanel vitalSignPanel;
    private javax.swing.JLabel warningLabel1;
    private javax.swing.JPanel weatherForecastPanel;
    private javax.swing.JLabel weatherTitleLabel;
    private javax.swing.JLabel weatherWarningLabel;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JLabel welcomeRoleLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    
    
}
